General:
    [easy]      Find uncovered lines of code and write unit tests for these uncovered lines.
                    - [phpOMS] ResponseAbstract->getLanguage()
                    - [phpOMS] ModuleManager->installApplications
                    - [phpOMS] StatusAbstract->installRoutes
                    - [phpOMS] StatusAbstract->installHooks
                    - [phpOMS] StatusAbstract->activateHooks
                    - [phpOMS] StatusAbstract->deactivateHooks
                    - [phpOMS] StatusAbstract->uninstallHooks
                    - [phpOMS] ModuleAbstract->createModels
                    - [phpOMS] ModuleAbstract->updateModel
                    - [phpOMS] ModuleAbstract->createModel
                    - [phpOMS] ModuleAbstract->getLocalization
                    - [phpOMS] InstallerAbstract->installSettings
                    - [phpOMS] InstallerAbstract->createTables
                    - [phpOMS] InstallerAbstract->reInit
                    - [Model] CoreSettings->create
                    - .... Basically all Modules/Models, Modules/Controller
    [easy]      Create database ER diagrams for every module (use DBeaver ER functionality)
                    - Checklist
                    - Contact
                    - DatabaseEditor
                    - Draw
                    - Messages
                    - Monitoring
                    - Shop
    [medium]    When returning models (backend and API requests) the permission should be checked
    [medium]    Implement a setting which lets users see all content no matter the content language (e.g. all News)
    [medium]    Implement an approval module which only runs a module/user specific action once it is approved. This
                    functionality might be part of the workflow module or at least smoothly interact with this module.
                    Additionally, it should probably make use of the Tasks module.
    [medium]    The modules use the module name for identification in many places where the module id should be used
                    for performance reasons
    [medium]    [bug] If the pagination (next/previous) is implemented in a tab (e.g. second tab) the newly loaded page
                    after clicking on 'next' shows the first tab instead of the tab which contains the list. The
                    next/previous button/link should contain the # from the URL
    [medium]    Many models would benefit from unit and app association. Sometimes models should only be
                    available/associated with a specific unit (e.g. news article for website, backend, shop etc.)
    [medium]    After completely figuring out permissions every API function needs to be checked if it behaves
                    correctly depending on the different permissions (e.g. user created the model, user who is allowed
                    to access the model but not change it, ...).
    [hard]      Implement OAUTH2 client
    [hard]      Implement OAUTH2 server
    [hard]      Implement ServiceWorkers
    [hard]      Implement QR code generator
    [hard]      Implement data matrix generator
    [hard]      Implement code reader (bar code, data matrix, qr)

phpOMS:
    [medium]    [Graph] Implement missing functionality
                    - Count all paths between 2 nodes
                    - Return all paths between 2 nodes
                    - Find cycles using graph coloring
                    - Find a negative cycle
                    - Find cycles with n length
                    - Find cycles with odd length
                    - Find shortest path between 2 nodes
                    - Find longest path between 2 nodes
                    - Find islands
                    - Find all unreachable nodes
                    - Check if strongly connected
                    - Find longest path between 2 nodes
                    - Find longest path
                    - Get the girth
                    - Get the circuit rank
                    - Get the node connectivity
                    - Get the edge connectivity
                    - Is the graph connected
                    - Get the unconnected nodes as their own graph
                    - Check if bipartite
                    - Check if triangle free
    [medium]    [KMeans] In some weird cases the Cluster test fails. This happens approximately 5 / 100 test runs
                    (invalid center coordinate value)
    [medium]    [QueryBuilder] Implement missing functions such as sum, count, ...
    [medium]    [DataMapper] Reconsider the order of the `get(*)` parameters (e.g.depths/fill)
    [medium]    [DataMapper] The hasMany order should be customizable (ASC/DESC and also the row used for the order
                    e.g. createdAt, ...)
    [medium]    Once read only variables become available many models can remove getter/setter function
                    (e.g. ApplicationAbstract, ConnectionAbstract and various models)
    [medium]    [DataMapper] Implement hasMany default parameters in mappers (e.g. limit, sortBy, sortOrder).
                    This is useful for Item profile, Customer profile, Supplier profile etc. Alternatively find a way
                    to implement it in ::withConditionals ?! Or do we need a new function
                    ::withParameters('memberName/columnName?', [options]). Or just a ::with() function which we also
                    need  to specify for the future for which relations need to be loaded at all
                    e.g. ::with('files', ['limit' => 5, 'sortBy' => 'createdAt', 'sortOrder' => 'ASC'], [Client::class])
                    I think the ::with(...) makes the most sense. Maybe this can also be combined with the
                    withConditional. This way we can remove/merge withConditional. There is one problem, maybe we need
                    a ::onlyWith function, because we don't want to load all relations
    [hard]      [DataMapper] In the DataMapper when using getQuery() and then making a ->where(...) the where will
                    often fail because the table name is suffixed with an integer e.g. `_3`. This means you need to
                    know the depth of the query in order to manually write it. The query builder should figure this out
                    by himself. It knows the `_INT` value from the `FROM` clause and should just overwrite in the where
                    clause where needed. See the GSD Importer from the exchange module for reference.
    [hard]      [DataMapper] In the DataMapper implement iterable fetch. Currently all models are returned in one go,
                    additionally an iterator should be returned for iterable access in case of MANY results
                    (e.g. Exchange module)
    [hard]      [DataMapper] Only update changed relations (e.g. allow coder to tell the datamapper what changed)
    [hard]      [DataMapper] Implement get() where the coder can tell the datamapper which fields and relations to fill.
    [hard]      [DataMapper] The ::with() function uses blacklisting it should be changed to whitelisting for
                    relations
    [hard]      [Email] Implement email sending and receiving
    [hard]      [Grammar] Implement schema modification grammar (alter tables)
    [hard]      [DataMapperAbstract] Performance improvement (intHash, ->getValue() vs. direct access for public
                    members, allow transactions)
    [hard]      [DataMapperAbstract] In some cases the array is required in the ::withConditional() function. This
                    seems to be the case if a model doesn't have the condition but a sub-model has it. The mapper
                    should simply not use the conditional if it doesn't exist in the mapper
                    (see ItemManagement::BackendController or ClientManagement::BackendController with the BillMapper,
                    this is a stupid fix)
    [hard]      [Router+EventManager+Hooks] Instead of doing 100% regex matching, combine it with a tree search, this should
                    be faster
    [hard]      Implement a decent full text search which finds texts that are similar (e.g. similar spelling, only
                    some words in between, maybe different word order, etc.)

jsOMS:
    [easy]      [Speech] Remove the speech recognition wrapper once it becomes standard
    [medium]    [AdvancedInput] In the AdvancedInput, implement predefined values (e.g. predefined/default tags)
    [medium]    [AdvancedInput] In the AdvancedInput, implement mandatory predefined values (e.g. tags which cannot be
                    deleted)
    [medium]    [Table] If column is numeric sort numerically, not by character (1,2,3 vs, 1, 10, 11, 12)
    [medium]    [Table] If column is datetime sort by datetime, not by character (careful, datetime formats can be
                    different)
    [medium]    [Table] The table sort is WAY too slow!!! (e.g. editor-list by title).
                    One problem might be a bad algorithm (e.g. get content, and use sort() of js instead, check new
                    order and re-sort the table rows based on the ordered array).
                    Another problem could be that the browser is doing some stupid stuff because of UI calls?
    [medium]    [VoiceCommand] Implement table/link navigation
    [medium]    [Table] Implement export (local=visible data, external=all data)
    [medium]    [Table] Implement filtering (local=visible data, external=all data)
    [medium]    [Table] Highlight filtering of the filtered columns
    [medium]    [Form] On change highlight the data/element that got changed
    [medium]    [Form] Invalid API responses should undo the UI changes
    [medium]    [Form] Removing a form from the DOM should unbind it
    [medium]    [Form] Adding a template to the DOM should modify its id/generate a custom/random id for the added
                    element
    [medium]    [Form] Add/bind UI elements after adding them to the DOM
    [medium]    [Form] Consider to allow multiple/different add buttons which behave a little bit different
    [medium]    [Form] If a form has unsaved content the browser should ask if the user really wants to change the page
                    or close it ("beforeunload"-Event)
    [medium]    [AdvancedSelect] Implement (with auto filtering, none-element, multi-select, default-selects,
                    must-have selects)
    [medium]    [ActionManager] Implement listeners for child elements if the selector is specified
    [medium]    [Action] Create a action which adds/removes DOM elements
    [medium]    [Logger] Log DOM changes to the user
    [medium]    [Library] Consider to create a library function which finds the nearest element based on a select
                    (horizontal and vertical search, `*.nearest()` does not work this way)
    [medium]    [UriFactory] Consider to parse EVERY URL with the Uri factory. This however might cause double parsing
                    and therefore bugs
    [medium]    The frontend loads the correct tab based on the provided fragment, but it is slow. Doing this in the
                    backend can already fix this but the frontend implementation should be fixed, because this should
                    be the job of the frontend.
    [medium]    Implement drag sortable table rows (https://htmldom.dev/drag-and-drop-table-row/).
                    Implement the same concept for other elements, maybe abstract it straight away!

cssOMS:
    [medium]    Create drop down = select with search field
    [medium]    Create a slider element with two elements which the user can slide (optionally also only one slider
                    should be possible)
    [medium]    Implement nicer input validation (e.g. show check mark and x in the input fields / optionally)
    [medium]    Create a "more" foldable content area similar to the accordion which is closed by default
                    e.g. for "hiding" advanced/detailed configuration options which are rarely used. A design could be
                    a line where at the beginning or end is a downwards arrow? Maybe put a text somewhere reading
                    "more"?

Build/Website:
    * Module page/build
        * Text file with all the module git links
        * Download and install
        * Default inspections/tests (unit tests, info.json, language files used, language files in all languages same
            content, amount of languages, routes in controller available, dependencies valid, code coverage,
            phpstan, phpcs)
        * Add to database

Orange-Management:
    [medium]    The "Log" tabs in many models should have a separate permission which hides them.
                    Maybe a user needs to have read permissions of the monitoring module in order to see them?
                    Alternatively it could be a *_MONITOR permission for the specific model in every module.
                    This is a little bit finer but also expands the permission complexity
    [medium]    sections/portlets with a footer sometimes have problems with floated elements.
                    e.g. a right floated button will break the layout if the left element(s) are too long causing
                    wrapping.
                    -------> Solution: create flexbox with margin

Admin:
    [medium]    Implement password reset
    [medium]    [UI] Add user & group settings
    [medium]    [UI] Add account/group removal from each other
    [medium]    [UI] Add permission removal from accounts/groups
    [medium]    [UI] Add permission modification for accounts/groups

Auditor:
    [easy]      Create foldable/tree view for json logs e.g. https://www.cssscript.com/json-data-tree-view/
    [medium]    Implement blockchain for the auditor. This either requires database locking (slow),
                    modification of audit logs after inserts (slow) or a background process which calculates the
                    blockchain (OK).
    [medium]   Create printable reports based on specific changes

Billing:
    [medium]    Show invoice pdf in preview on change.
    [medium]    Only create pdf preview if preview is visible?
    [medium]    [Analysis] Gross profit (total bill and elements)
    [medium]    Show bill relations (on tab which shows all related bills)
    [medium]    Create send as email button inside the bill. this opens the send email view where the email is
                    pre-written with the attached pdf.
    [medium]    In the supplier and client view you should be able to select multiple bills and click print for
                    printing
    [medium]    In the supplier and client view you should be able to select multiple bills and click send as email
                    for email sending
    [medium]    The send bill as email should have a global settings where you can either define a global email or
                    empty = user specific email
    [medium]    Sending emails should have a default email format and a default invoice naming convention, additionally
                    there should be the option to define a user specific email text and pdf naming convention
    [medium]    Clients should have a invoice_email address which is stored in the client
    [medium]    Create a performance 'past' and 'future' limit to prevent going too far into the past or future
    [medium]    Save number-format and the rendered number in the bill, currently only the format is saved and rendered
                    on the fly which is bad for searching and performance. Maybe even ONLY save the number?
    [medium]    Save original net value and discounted net value (currently only discounted net value is stored)
    [medium]    Save discounts
    [medium]    Re/usable templates
    [medium]    Re/usable texts
    [medium]    Automatic email invoice after finishing
    [medium]    Batch print/export invoices based on filter
    [medium]    Bill element sorting should have a small bar at the beginning of every element which allows the user to
                    drag/drop the element up or down. Of course the up/down arrows which are currently
                    implemented should remain.
    [hard]      Implement approval concept for invoices and invoice elements (e.g. price, tax, margin etc.).
                    The problem is that different changes may require different responsible people to approve this,
                    this means you would need some indication which shows which approval is still outstanding.
                    Of course a less detailed visual indication would be a red, yellow, green marker at the beginning
                    of the invoice/element or background highlight
    [hard]      Allow to import existing bills (e.g. order -> invoice, offer -> confirmation -> delivery note ...)
    [hard]      Share media files between imported bills for easier searching. Maybe do this by creating a root element
                    which all bills reference and show files of this root bill?

Calendar:
    [medium]    Load event loading to a fixed amount of months (e.g. current month, previous month and next month)
    [medium]    Implement event popup in the UI on click
    [medium]    Create different interval templates (year, quarter, month, week, day)
    [medium]    Allow user to define the start of the week (e.g. Sunday, Monday)
    [medium]    [Chart] Implement gantt chart
    [hard]      Create iCal parser/reader and builder
    [hard]      Create database, models and mappers

Chat:

Checklist:
    [medium]    Create job which can automatically create checklists (e.g. end of month checklists)

ClientManagement:
    [easy]      Add list for top articles on profile page... important for customer calls
    [easy]      Add list for recommended purchase items + type tags e.g. re-order because empty,
                    cross selling, promotion (if promotion already used, don't offer any longer)
    [easy]      Create a view where you can see all bills of the customer
    [easy]      Create a view where you can see all items of the customer
    [medium]    Create a simple button to send an email to a customer, this also should have the option to change the
                    mail address (e.g. drop down with all available email addresses and option to manually write it)
    [medium]    [Notes] Add note types (e.g. phone, email, meeting, ...)
    [medium]    [Map] Add a geo map of the customers location (either on a real map or on the already added SVG maps)
    [medium]    [Map] Create a map of all customers (maybe as data points or as heat maps)
    [medium]    [Map] Create a map of sales (maybe as data points or as heat maps)
    [medium]    [Doc] Create default letter Doc (with/without letter head)
    [medium]    [Receivable] Print receivable
    [medium]    [Permission] Make customers only visible/readable to authorized people (e.g. sales rep may only see
                    his own clients)
    [medium]    [Permission] Client view should be customizable since different groups have different interests and
                    read permissions (e.g. sales reps, finance, etc.)
    [medium]    [Analysis] Sales + Gross profit
    [medium]    [Analysis] Quantity orders + quantity articles
    [medium]    [Analysis] Segment sales
    [medium]    [Analysis] Top articles
    [medium]    [Analysis] Cross selling (bought as well)
    [medium]    [Analysis] Amount of invoices
    [medium]    [Analysis] Amount of different articles
    [medium]    Allow to specify the accounting account (e.g. a customer who is a supplier may have the same account)

CMS:
    [easy]      Make file content view 100% container height
    [easy]      Allow content changes and saving
    [medium]    Ideas for applications based on modules (e.g. monitor/log dashboard, sales dashboard, calendar,
                    support/ticket, clocking, Q&A, Wiki, shop)
    [medium]    Implement line numbers
    [medium]    Implement code formatting / syntax highlighting

Comments:

ContractManagement:
    [medium]    Allow to specify how many month in advance you want to be notified
    [medium]    Contracts can have a different date of expiration and last renewal. (e.g. renewal needs to happen 1
                    month before contract end)
    [medium]    Contracts should be filtered by organization
    [medium]    It should be possible to link contracts to accounts (e.g. accounts for customers, suppliers, ...)
    [hard]      Send / message to responsible person

Dashboard:
    [medium]    [bug] Drag&Drop element sometimes disappear on drop
    [medium]    Create default dashboard templates which can be used by users, changing them copies it for this user
    [medium]    Allow people to modify a dashboard and automatically save it / reload it
    [medium]    Implement a way for other modules to provide dashboard components (allow modules to register themselves
                    in a database table)

DatabaseEditor:
    [medium]    Implement basic functionality / queries in UI

Editor:
    [medium]    Add document type (e.g. phone, meeting, email). Maybe use tags? Or are tags something else?!
    [medium]    Implement versioning
    [medium]    Allow download as markdown, text, PDF, word
    [hard]      Auto recognize CSV files and create table view editor
    [hard]      Create special markdown content (calendar, chart, task, news, comment, media, ...)

EventManagement:
    [medium]    Implement goal definition. Goals could be based on tasks (every completed task represents x%),
                    linear time line (every day represents x%), value based (a calculated value represents x%),
                    manual input based (the user decides the completion %)
    [medium]    Add milestones

Exchange:
    [hard]      Create a job which automatically runs a import/export script

Finance:
    [medium]    Implement accounting forensics (Benfords Law, cent value distribution analysis, amount of bookings
                    between specific amounts, amount * bookings between specific amounts, etc.)

Helper:
    [medium]    Implement direct print instead of opening a new window with
                    `document.getElementById('iHelperFrame').contentWindow.print();`

HumanResourceManagement:
    [hard]      Fix employee list (see comment at the bottom, query builder bug)

HumanResourceTimeRecording:
    [medium]    Allow session delete/modification/creation afterwards
    [medium]    Create approval process for delete/modification/creation afterwards (with logging)
                    (e.g. HR department or head of department)
    [medium]    Create overview for HR or head of department
    [medium]    Create overview for employee

ItemManagement:
    [easy]      Create item list for purchasing
    [easy]      Use name for attribute identification (currently only used for localization). Is this really required?
                    id might be fine?
    [medium]    Add an area for markers (e.g. not sold for a x month, not purchased for x month, bad margin... etc.)
                    Similar to an alarm system (maybe green, yellow, red markers?)
    [medium]    [List] Create a second optional list view where the item is shown at the bottom of the list which
                    allows the user to the the item list at the top and the item itself below. Either create a custom
                    view or somehow append an iframe below the list which is loaded based on the selected item
    [medium]    [Notes] Add note types (e.g. phone, email, meeting, ...)
    [medium]    [Label] Create default label layout
    [medium]    [Label] Create item specific label layout
    [medium]    ItemAttributeTypes should specify which datatype they expect. The ApiController needs to validate if a
                    value can be created for an attribute type (check validation pattern, datatype, is required)
    [medium]    [Permission] Item view should be customizable since different groups have different interests and
                    read permissions (e.g. sales reps, finance, etc.)
    [medium]    [Analysis] Sales + gross profit
    [medium]    [Analysis] quantity sales, quantity customers
    [medium]    [Analysis] Cross selling
    [medium]    [Analysis] Top customers
    [medium]    [Analysis] Amount of customers
    [medium]    [Analysis] Amount of article sales
    [medium]    [Analysis] Amount of new customers
    [medium]    [Analysis] Cross selling articles
    [medium]    Show different prices on item profile frontpage (e.g. domestic, export, quantity discount)
    [medium]    Show additional important item information for sales/purchase, currently too controlling/stats focused
    [medium]    Consider to add a purchased analysis, used analysis and manufactured analysis
                    (currently only sales focused = e.g. monthly sales)
    [medium]    It probably makes more sense to create analysis tabs instead of putting the charts on the frontpage
                    (e.g. sales analysis, purchase analysis, production analysis)
    [hard]      Make attributes mandatory (e.g. HC-code/tariff code number)

Job:
    [medium]    Checklist creation job
    [medium]    Exchange job

Kanban:
    [easy]      Allow board templates? maybe at least colors?
    [easy]      Allow card templates? maybe at least colors?
    [easy]      Implement card status (archive, public, inactive)
    [medium]    Implement unread cards/comments notification/highlight
    [medium]    Highlight card with new comments (e.g. make comment count background red?)
    [medium]    Consider to replace card comments with normal comments from the Comments module

Knowledgebase:
    [easy]      Implement category create/edit view
    [easy]      Implement doc create/edit view (similar to news/editor)
    [easy]      Add category back/up button when in a subcategory

Media:
    [medium]    Allow links as media files (e.g. use path). If a link is detected it should forward to that link,
                    this would also allow other modules to create pseudo media elements e.g. helper/editor.
                    Upon clicking on it e.g. the editor is opened. This would mean the editor needs to create this
                    media model whenever the user creates a document. The path needs to be the same as in the moduel
                    itself e.g. Accounts/... or whatever the user defined as path in the module itself. The url should
                    be relative e.g. /editor?id={id} which makes it domain name independent.
    [medium]    Allow to download a collection/directory as zip
    [medium]    Create preview option for images (e.g. ctrl+mouse hover or a different "list-view" like in explorer)
    [medium]    Allow to download files (single files and by checkmarking multiple files)
    [medium]    Allow to create a collection when uploading multiple files
    [medium]    Validate file size on the frontend before uploading
    [medium]    Automatically change the file encoding of text files
    [medium]    Enable image interlacing (in the past there was a bug)
    [medium]    Implement media encryption/decryption (optionally)
    [medium]    Implement media password protection for read (optionally)
    [medium]    Implement resumable uploads
    [medium]    Implement drag & drop uploads
    [medium]    Implement drag & drop moving of files/directories in the frontend
    [medium]    Implement path changes in the frontend
    [medium]    Allow the modification of collections
    [medium]    Implement external resources (URLs, dropbox, aws, ...)
    [medium]    Allow to edit the breadcrumbs, which replaces them with a text field which can be changed then than
                    automatically loads the new path
    [medium]    There is a Media "type" in order to identify media for specific purposes (the name could be different,
                    don't remember). This should be a relation table because a media element may be used for
                    different purposes
    [medium]    Implement temporary file storage (very useful for making files downloadable for a limited time).
                    Maybe create a new temp file directory or database collection where a available_until timedate gets
                    defined (must be handled in the database). The biggest problem is how to delete them,
                    this requires a background process/task scheduler. Additionally, these files must have permissions
                    because they may be only for one user or a group of users.
    [hard]      Create password requirement for collections (for a simple collection this is easy, the problem starts
                    with sub-collection and sub-directories where we don't know that the parent element is password
                    protected)

Messages:
    [medium]    Allow to transform a message as task
    [hard]      Implement push notification
    [hard]      Implement email sending/receiving
    [hard]      Implement internal message/conversion storage
    [hard]      Users may be invited to old conversations

Monitoring:
    [easy]      Implement integrity check based on installed version and remote hash list
                    (see monitoring-security.tpl.php)

Navigation:
    [easy]      Improve goto command to match based on proximity and only based on visible links
    [medium]    Consider to create on navigation language file (same as routing files) during the installation process
    [medium]    Create settings page which allows to modify the navigation in the module settings
    [medium]    Consider to implement tabs in the side bar
    [medium]    Consider to implement childelements on hover (sidebar and content)

News:
    [easy]      Implement email/message notification on create
    [medium]    Allow tag modification
    [medium]    Fix bug where content overflows

Organization:
    [medium]    [Organigram] Create better organigram (better grouping, maybe as SVG)
    [medium]    [Organigram] Make the organigram printable
    [medium]    [Organigram] Make the organigram versioned/approved (e.g. for ISO)

Profile:
    [hard]      [Contacts] Find a way to hide some contact/address information for some modules.
                    Some information are only meant for specific modules (e.g. private address, phone number
                    e.g. HR module) The reason why this is difficult is that this information should not be part of the
                    model table but in the relation (many-to-many). At the moment the information in the relation table
                    is not used apart from the relations it self. A solution could be to specify a filter in the
                    relation in the mapper.
                    Empty = all relations, filter = only populate the model array with relations which match the filter.

ProjectManagement:
    [medium]    Implement goal definition. Goals could be based on tasks (every completed task represents x%),
                    linear time line (every day represents x%), value based (a calculated value represents x%),
                    manual input based (the user decides the completion %)
    [medium]    Add milestones

Promotion:
    [medium]    Implement goal definition. Goals could be based on tasks (every completed task represents x%),
                    linear time line (every day represents x%), value based (a calculated value represents x%),
                    manual input based (the user decides the completion %)

QA:
    [easy]      Remove category (it's not used and I don't remember it's purpose, tags are better)
    [easy]      Implement voting
    [easy]      Implement accepting answers
    [easy]      Implement question create view
    [easy]      Add question answer component/like comment in question
    [easy]      Make votes contain for who the vote is, this way the vote score sum for accounts is MUCH easier and
                    faster
    [easy]      Create different QA Apps (check out WikiApp)
    [easy]      Make Questions QA App specific (check out WikiDoc)
    [hard]      Create QA app with login

Search:
    [medium]    Implement a tag search hook which finds content based on tags
    [medium]    Implement module specific search (e.g. :tasks title ...)
    [medium]    Implement global search hook (every module performs a search based on the search)
    [medium]    Create a api search filter which allows to search in a specific module only (e.g. in the shop app only
                    search the shop, in the QA app only search in QA)

Shop:
    [medium]    Create flag for shoing shop items in the shop
    [medium]    Show shop items in the shop
    [hard]      Create app with login

SupplierManagement:
    [easy]      Create a view where you can see all bills of the supplier
    [easy]      Create a view where you can see all items of the supplier
    [medium]    [Notes] Add note types (e.g. phone, email, meeting, ...)
    [medium]    [Doc] Create default letter Doc (with/without letter head)
    [medium]    [Payable] Print payable
    [medium]    [Analysis] Purchase EUR + gross profit
    [medium]    [Analysis] Quantity order, quantity articles
    [medium]    [Analysis] Segment purchase
    [medium]    [Analysis] Top articles
    [medium]    [Analysis] Cross selling
    [medium]    Allow to specify the accounting account (e.g. a customer who is a supplier may have the same account)

Support:
    [easy]      Allow support/tickets to be transformed to Q&A question and answers
    [easy]      Allow Q&A to be transformed to support
    [medium]    Email user after answer
    [medium]    Allow user to rate response after finishing it
    [medium]    TicketAttributeTypes should specify which datatype they expect. The ApiController needs to validate if
                    a value can be created for an attribute type (check validation pattern, datatype, is required)
    [hard]      Create support app with login

Tag:
    [medium]    Create settings with a set of default colors
    [medium]    Create a hook which gets triggered if a group is created. This hook also creates a tag

Tasks:
    [easy]      [Analyzer] Implement analyzing functionality (tasks created, answered, time required to finish task,
                    always in time?)
    [medium]    Instead of hiding (or as an additional type) tasks created from other modules (e.g. support) make them
                    link to the UI where it can be handled (e.g. ticket)
    [medium]    Make answer box on the right scroll down with the content, this way you can immediately respond without
                    scrolling.
    [medium]    Implement email notification on progress/changes (new task, forwarded, ...)
    [medium]    The unread task count is currently not really correct and needs to be fixed
    [medium]    Allow batch handling of tasks in the dashboard/overview for faster interaction (e.g. select and close)
    [medium]    Create a user calender for tasks which only shows when tasks are due
    [hard]      Implement has seen and unseen (use system where every task has a seen flag for a user if it is seen)

WarehouseManagement:

Workflow:
    [medium]    Create approval process which can be used by many modules (modules are allowed to provide their own
                approval templates)

Database permission handling:

    Option1: Check full query

    select ...
    from ...
    where ...
      (
        account_permission_account = ACCOUNT
        AND (account_permission_unit IS NULL OR account_permission_unit = 'UNIT')
        AND (account_permission_app IS NULL OR account_permission_app = 'APP')
        AND (account_permission_module IS NULL OR account_permission_module = 'MODULE')
        AND (account_permission_type IS NULL OR account_permission_type = 'TYPE')
        AND (account_permission_element IS NULL OR account_permission_element = 'THIS_ID')
        AND (account_permission_component IS NULL OR account_permission_component = 'COMPONENT')
        AND account_permission_permission = ???
      )
      OR
      (
        group_permission_group IN (...)
        AND (group_permission_unit IS NULL OR group_permission_unit = 'UNIT')
        AND (group_permission_app IS NULL OR group_permission_app = 'APP')
        AND (group_permission_module IS NULL OR group_permission_module = 'MODULE')
        AND (group_permission_type IS NULL OR group_permission_type = 'TYPE')
        AND (group_permission_element IS NULL OR group_permission_element = 'THIS_ID')
        AND (group_permission_component IS NULL OR group_permission_component = 'COMPONENT')
        AND group_permission_permission = ???
      )

    Option2:
    1. Check if general permission exists -> just do query
    2. Check for specific element exists -> just do query but with column_id IN (... elements ...)

    ::with(PermissionAbstractMapper::class, $permissions)

    // this will create a where condition generated by the PermissionAbstractMapper::class e.g. call PermissionAbstractMapper::createWith($query)

    ///

    Problem if joins on same tables (e.g. staff-list)
    (The tabbed join is the problem, the second query is the solution. The problem is that you need a different alias which is hard to created since th alias usally is suffixed with the depths which is a problem in this case since the alias has nothing to do with the depth)

    a solution coult be to index the joins by depths+join count e.g. account_2_1, account_2_2

    SELECT `account_2`.`account_name1` as account_name1_2, `account_2`.`account_name2` as account_name2_2, `account_2`.`account_name3` as account_name3_2
    FROM `hr_staff` as hr_staff_4
    LEFT JOIN `media` as media_3 ON `hr_staff_4`.`hr_staff_image` = `media_3`.`media_id`
    LEFT JOIN `profile_account` as profile_account_3 ON `hr_staff_4`.`hr_staff_profile` = `profile_account_3`.`profile_account_id`
            LEFT JOIN `account` as account_2 ON `media_3`.`media_created_by` = `account_2`.`account_id`
            AND `profile_account_3`.`profile_account_account` = `account_2`.`account_id`
    LEFT JOIN `l11n` as l11n_1 ON `account_2`.`account_localization` = `l11n_1`.`l11n_id`
    LEFT JOIN `media` as media_2 ON `profile_account_3`.`profile_account_image` = `media_2`.`media_id`
    LEFT JOIN `account` as account_1 ON `media_2`.`media_created_by` = `account_1`.`account_id`;

    SELECT `account_2`.`account_name1` as account_name1_2, `account_2`.`account_name2` as account_name2_2, `account_2`.`account_name3` as account_name3_2
    FROM `hr_staff` as hr_staff_4
    LEFT JOIN `media` as media_3 ON `hr_staff_4`.`hr_staff_image` = `media_3`.`media_id`
    LEFT JOIN `profile_account` as profile_account_3 ON `hr_staff_4`.`hr_staff_profile` = `profile_account_3`.`profile_account_id`
        LEFT JOIN `account` as account_3 ON `media_3`.`media_created_by` = `account_3`.`account_id`
        LEFT JOIN `account` as account_2 ON `profile_account_3`.`profile_account_account` = `account_2`.`account_id`
    LEFT JOIN `l11n` as l11n_1 ON `account_2`.`account_localization` = `l11n_1`.`l11n_id`
    LEFT JOIN `media` as media_2 ON `profile_account_3`.`profile_account_image` = `media_2`.`media_id`
    LEFT JOIN `account` as account_1 ON `media_2`.`media_created_by` = `account_1`.`account_id`;

    The problem is that every object needs to have a unique id so we could do this like _d3_o5 as alias.
    The problem with that however is that this would work for the getQuery() function but in the populateAbstract we don't know the object id. But maybe we can solve it by also passing the object ID here?
    This seems like a full weekend test!!! Better focus on other things first
